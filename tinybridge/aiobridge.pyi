from typing import Callable, Iterable, List, Mapping, Optional, Set, Tuple, Union

from result import Result
from tinydb.queries import QueryLike
from tinydb.table import Document, Table

class AIOBridge:
    def __init__(self, path: str, timeout: int = 10, *args, **kwargs) -> None: ...
    async def __aenter__(self) -> "AIOBridge": ...
    async def __aexit__(self, exc_type, exc_value, traceback) -> None: ...
    # DB level methods
    async def table(self, name: str, **kwargs) -> Result[Table, Exception]: ...
    async def tables(self) -> Result[Set[str], Exception]: ...
    async def drop_tables(self) -> Result[None, Exception]: ...
    async def drop_table(self, name: str) -> Result[None, Exception]: ...
    async def close(self) -> Result[None, Exception]: ...
    # Table level methods
    async def insert(self, document: Mapping) -> Result[int, Exception]: ...
    async def insert_multiple(
        self, documents: Iterable[Mapping]
    ) -> Result[List[int], Exception]: ...
    async def all(self) -> Result[List[Document], Exception]: ...
    async def search(self, cond: QueryLike) -> Result[List[Document], Exception]: ...
    async def get(
        self,
        cond: Optional[QueryLike] = None,
        doc_id: Optional[int] = None,
        doc_ids: Optional[List] = None,
    ) -> Result[Optional[Union[Document, List[Document]]], Exception]: ...
    async def contains(
        self, cond: Optional[QueryLike] = None, doc_id: Optional[int] = None
    ) -> Result[bool, Exception]: ...
    async def update(
        self,
        fields: Union[Mapping, Callable[[Mapping], None]],
        cond: Optional[QueryLike] = None,
        doc_ids: Optional[Iterable[int]] = None,
    ) -> Result[List[int], Exception]: ...
    async def update_multiple(
        self,
        updates: Iterable[Tuple[Union[Mapping, Callable[[Mapping], None]], QueryLike]],
    ) -> Result[List[int], Exception]: ...
    async def upsert(
        self, document: Mapping, cond: Optional[QueryLike] = None
    ) -> Result[List[int], Exception]: ...
    async def remove(
        self,
        cond: Optional[QueryLike] = None,
        doc_ids: Optional[Iterable[int]] = None,
    ) -> Result[List[int], Exception]: ...
    async def truncate(self) -> Result[None, Exception]: ...
    async def count(self, cond: QueryLike) -> Result[int, Exception]: ...
    async def clear_cache(self) -> Result[None, Exception]: ...
